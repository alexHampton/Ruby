n
sy
sx
n
s
n
moves
n
moves
n
new_spot
self.board[*new_pos]
new_pos
n
var local
vra local
n
moves
n
moves
n
moves
n
moves
n
var local
n
q
y
n
@cursor.selected
q
n
self.selected
n
@selected
n
s
self.selected
self
@cursor
quit
@cursor.selected
@cursor
quit
var local
q
self.board[*new_pos].color
self.board[*new_pos]
var local
n
q
self.board[-1, 4]
self.board[-1]
self.board[*new_pos]
var local
n
var local
n
s
n
self.board[*new_pos]
n
quit
var local
n
s
sy
sx
sx, sy
quit
s
sy
sx
n
s
n
s
n
s
n
self.class
q
@board[quit
@board
cursor_pos
q
self[sx,sy]
self
sy
sx
n
q
ex.message
n
var local
n
var local
quit
 n
n
s
q
@board[cursor_pos]
cursor_pos
q
n
quit
valid_moves
quit
var local
n
q
self.board[*new_pos]
var local
n
s
var local
n
var local
n
var local
s
n
s
n
s
moves
s
n
self
q
var local
self[sx,sy].valid_moves
self[sx, sy]
self
n
var local
n
var local
n
var local
q
@cursor_pos
new_pos
q
n
@cursor_pos
@current_pos
q
@cursor_pos
n
pos.all? {|c| c.between?(0,7)}
pos
s
new_pos
n
@cursor_pos
n
pos.all? { |c| c.between?(0,7)}
pos
s
new_pos
n
STDIN.echo?
STDIN.echo
var local
quit
[i, idx]
@board[i, idx]
@cursor.cursor_pos
quit
@board[2,0]
board[2,0]
var local
i
piece
quit
@cursor.cursor_pos
cursor.cursor_pos
cursor_pos
pos.pos
pos
quit
n
moves
n
quit
moves
n
self[sx, sy]
self[ex, ey].is_a?(Piece)
self[ex, ey].is_a?(Queen)
self[ex, ey].pos
self[ex,ey]
n
self[ex, ey]
self[sx,sy].pos
n
[ex, ey]
self[sx,sy].is_a?(Queen)
self[sx,sy].pos
var local
s
var local
self[4,1]
self[3,0]
b[3,0]
var local
n
s
quit
var local
n
var local
s
moves
n
s
moves
s
self
s
self[sx, sy].valid_moves
var local
n
var local
s
quit!
s
n
m
move_diffs
s
quit
var local
n
var local
n
nn
n
moves
n
var local
n
var local
quit!
quit
var local
n
var local
n
var local
n
var local
n
