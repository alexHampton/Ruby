q
x[5].losing_node?(:x)
x[4].losing_node?(:x)
x[3].losing_node?(:x)
x[2].losing_node?(:x)
x[1].losing_node?(:x)
x[0].losing_node?(:x)
x[5].winning_node?(:x)
x[4].winning_node?(:x)
x[3].winning_node?(:x)
x[2].winning_node?(:x)
x[1].winning_node?(:x)
x[0].winning_node?(:x)
mark
x[0]
x = node.children
node.children[0]
node.children.count
node
not_losing_or_winning_nodes
quit
var local
var ocal
n
s
var local
not_losing_or_winning_nodes
n
not_losing_or_winning_nodes
s
n
s
not_losing_or_winning_nodes
n
child.winning_node?(mark)
child
n
child.winning_node?(mark)
child.winning_move?(mark)
child
q
not_losing_or_winning_nodes
quit
node
mark
game
q
self.children[0].losing_node?(:o)
self.children[0].losing_node?(:x)
self.children
self
next_mover_mark
evaluator
q
evaluator
next_mover_mark
board.winner
n
next_mover_mark
evaluator
q
n
next_mover_mark
board.winner
evaluator
n
evaluator
q
s
q
@next_mover_mark
board.over?
@prev_mov_pos
prev_mov_pos
board.winner
evaluator
quit
break
continue
c
